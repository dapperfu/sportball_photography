Metadata-Version: 2.4
Name: sportball
Version: 1.0.0
Summary: Unified Sports Photo Analysis Package - AI-powered sports photo processing and organization
Author-email: Sportball Team <team@sportball.ai>
Maintainer-email: Sportball Team <team@sportball.ai>
License: MIT
Project-URL: Homepage, https://github.com/sportball/sportball
Project-URL: Repository, https://github.com/sportball/sportball.git
Project-URL: Issues, https://github.com/sportball/sportball/issues
Project-URL: Documentation, https://sportball.readthedocs.io
Keywords: computer-vision,ai,photo-sorting,sports,opencv,face-recognition,image-processing,machine-learning,yolo,object-detection,game-analysis
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: End Users/Desktop
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Multimedia :: Graphics :: Graphics Conversion
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Image Processing
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: opencv-contrib-python>=4.8.0
Requires-Dist: Pillow>=10.0.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: torch>=2.0.0
Requires-Dist: torchvision>=0.15.0
Requires-Dist: scikit-learn>=1.3.0
Requires-Dist: face-recognition>=1.3.0
Requires-Dist: dlib>=19.24.0
Requires-Dist: insightface>=0.7.3
Requires-Dist: onnxruntime>=1.16.0
Requires-Dist: ultralytics>=8.0.0
Requires-Dist: click>=8.1.0
Requires-Dist: rich>=13.0.0
Requires-Dist: tqdm>=4.65.0
Requires-Dist: loguru>=0.7.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: matplotlib>=3.7.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: pathspec>=0.11.0
Requires-Dist: psutil>=5.9.0
Provides-Extra: cuda
Requires-Dist: torch[cuda]>=2.0.0; extra == "cuda"
Requires-Dist: torchvision[cuda]>=0.15.0; extra == "cuda"
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Provides-Extra: all
Requires-Dist: sportball[cuda,dev]; extra == "all"

# Sportball üèà‚öΩüì∏

**Unified Sports Photo Analysis Package**

A comprehensive Python package for analyzing and organizing sports photographs using computer vision, machine learning, and AI techniques.

## üöÄ Features

- **Face Detection & Recognition** - Detect and cluster faces in sports photos
- **Object Detection** - YOLOv8-powered object detection (players, balls, equipment)
- **Game Boundary Detection** - Automatically split photos into games based on timestamps
- **Photo Quality Assessment** - Multi-metric quality analysis and filtering
- **Recursive Processing** - Process directories recursively by default
- **Parallel Processing** - GPU-accelerated processing with multi-threading
- **Sidecar Data Management** - JSON sidecar files for metadata and caching
- **Comprehensive CLI** - Clean command-line interface with subcommands

## üì¶ Installation

### Basic Installation

```bash
pip install sportball
```

### With GPU Support (Recommended)

```bash
pip install sportball[cuda]
```

### Development Installation

```bash
git clone https://github.com/sportball/sportball.git
cd sportball
pip install -e .[dev]
```

## üéØ Quick Start

### Face Detection

```bash
# Detect faces in images (recursive by default)
sportball face detect /path/to/images

# Detect faces with specific confidence threshold
sportball face detect /path/to/images --confidence 0.7

# Process only current directory (disable recursion)
sportball face detect /path/to/images --no-recursive
```

### Object Detection

```bash
# Detect objects in images (recursive by default)
sportball object detect /path/to/images

# Detect specific object classes (including balls)
sportball object detect /path/to/images --classes "person,sports ball"

# Detect only balls
sportball object detect /path/to/images --classes "sports ball"

# Extract detected objects
sportball object extract /path/to/images /path/to/output --object-types "person,sports ball"
```

### Game Splitting

```bash
# Automatically detect and split games
sportball games split /path/to/photos /path/to/games

# Use specific file pattern (e.g., September 2025 photos)
sportball games split /path/to/photos /path/to/games --pattern "202509*_*"

# Add manual split points
sportball games split /path/to/photos /path/to/games --split-file splits.txt
```

### Ball Detection (via Object Detection)

```bash
# Detect balls in images (recursive by default)
sportball object detect /path/to/images --classes "sports ball"

# Extract detected balls
sportball object extract /path/to/images /path/to/output --object-types "sports ball"

# Analyze ball detection results
sportball object analyze /path/to/images --classes "sports ball"
```

### Quality Assessment

```bash
# Assess photo quality (recursive by default)
sportball quality assess /path/to/images

# Filter low-quality images
sportball quality assess /path/to/images --filter-low-quality --min-score 0.6

# Process only current directory
sportball quality assess /path/to/images --no-recursive
```

## üõ†Ô∏è CLI Commands

### Main Commands

- `sportball face` - Face detection and recognition
- `sportball object` - Object detection and extraction (including balls)
- `sportball games` - Game boundary detection and splitting
- `sportball quality` - Photo quality assessment
- `sportball util` - Utility operations (cache, sidecar management)

### Command Aliases

You can use `sb` as a shorter alias for `sportball`:

```bash
sb face detect /path/to/images
sb object detect /path/to/images --classes "sports ball"
sb object extract /path/to/images /path/to/output
sb games split /path/to/photos /path/to/games
```

### Global Options

- `--gpu/--no-gpu` - Enable/disable GPU acceleration
- `--workers N` - Number of parallel workers
- `--cache/--no-cache` - Enable/disable result caching
- `--verbose` - Enable verbose logging
- `--quiet` - Suppress output except errors
- `--no-recursive` - Disable recursive directory processing (most commands)

## üîß Configuration

### GPU Acceleration

Sportball automatically detects and uses GPU acceleration when available. You can control this behavior:

```bash
# Force CPU usage
sportball --no-gpu face detect /path/to/images

# Specify number of workers
sportball --workers 8 face detect /path/to/images
```

### Caching

Results are automatically cached to avoid reprocessing. Cache management:

```bash
# Clear cache
sportball util clear-cache

# Show cache summary
sportball util sidecar-summary /path/to/images
```

## üìä Sidecar Files

Sportball uses JSON sidecar files to store metadata and results:

- `image_face_detection.json` - Face detection results
- `image_object_detection.json` - Object detection results
- `image_ball_detection.json` - Ball detection results
- `image_quality_assessment.json` - Quality assessment results
- `game_detection.json` - Game boundary detection results

### Sidecar Management

```bash
# Show sidecar summary
sportball util sidecar-summary /path/to/images

# Clean up orphaned sidecar files
sportball util cleanup-sidecars /path/to/images

# Delete sidecar files for specific operation
sportball util delete-sidecars /path/to/images --operation face_detection
```

## üêç Python API

You can also use Sportball programmatically:

```python
from sportball import SportballCore
from pathlib import Path

# Initialize core
core = SportballCore(enable_gpu=True, max_workers=4)

# Detect faces
results = core.detect_faces(Path("/path/to/images"))

# Detect objects
results = core.detect_objects(Path("/path/to/images"))

# Detect games
results = core.detect_games(Path("/path/to/photos"))

# Assess quality
results = core.assess_quality(Path("/path/to/images"))
```

## üé® Decorators

Sportball provides Pythonic decorators for common operations:

```python
from sportball.decorators import gpu_accelerated, parallel_processing, progress_tracked

@gpu_accelerated(device='cuda:0')
@parallel_processing(max_workers=4)
@progress_tracked(description="Processing images")
def process_images(images):
    # Your processing code here
    pass
```

## üìà Performance

- **GPU Acceleration** - Automatic CUDA detection and fallback to CPU
- **Parallel Processing** - Multi-threaded and multi-process support
- **Progress Tracking** - Real-time progress bars with tqdm
- **Result Caching** - Avoid reprocessing with intelligent caching
- **Memory Efficient** - Lazy loading and efficient memory management

## üîç Examples

### Complete Workflow

```bash
# 1. Detect faces in all photos (recursive)
sportball face detect /path/to/photos --confidence 0.6

# 2. Detect objects (players, balls) - recursive by default
sportball object detect /path/to/photos --classes "person,sports ball"

# 3. Split photos into games
sportball games split /path/to/photos /path/to/games

# 4. Assess photo quality (recursive)
sportball quality assess /path/to/photos --filter-low-quality

# 5. Generate comprehensive report
sportball util sidecar-summary /path/to/photos
```

### Batch Processing

```bash
# Process multiple directories
for dir in /path/to/games/*/; do
    sportball face detect "$dir" --confidence 0.7
    sportball object detect "$dir" --classes "person,sports ball"
done
```

## üß™ Testing

```bash
# Run tests
pytest

# Run with coverage
pytest --cov=sportball

# Run specific test categories
pytest -m "not slow"  # Skip slow tests
pytest -m cuda        # Only CUDA tests
```

## üìö Documentation

- [API Reference](https://sportball.readthedocs.io/api/)
- [CLI Reference](https://sportball.readthedocs.io/cli/)
- [Examples](https://sportball.readthedocs.io/examples/)
- [Contributing](https://sportball.readthedocs.io/contributing/)

## ü§ù Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- OpenCV for computer vision capabilities
- PyTorch for deep learning framework
- YOLOv8 (Ultralytics) for object detection
- face_recognition for face detection and recognition
- Click for CLI framework
- Rich for beautiful terminal output

## üìû Support

- [GitHub Issues](https://github.com/sportball/sportball/issues)
- [Discussions](https://github.com/sportball/sportball/discussions)
- [Email](mailto:support@sportball.ai)

---

**Sportball** - Making sports photo analysis simple, fast, and powerful! üèà‚öΩüì∏
